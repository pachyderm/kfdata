# Get me a Kube cluster with Kubeflow (and later, for demo purposes Pachyderm) on it.

name: KFData

base:

  # TODO: make these optional
  preload_docker_images: []
  kernel_image: "quay.io/testfaster/ignite-kernel"

  # TODO: add support for dockerfile contexts to testfaster, so that we don't have to go via raw.githubusercontent.com
  # for the kfctl_k8s_istio.v1.1.0.yaml
  os_dockerfile: |-
    FROM quay.io/testfaster/kube-ubuntu

    # kubeflow
    RUN curl -LO https://github.com/kubeflow/kfctl/releases/download/v1.1.0/kfctl_v1.1.0-0-g9a3621e_linux.tar.gz && \
        tar xf kfctl_v1.1.0-0-g9a3621e_linux.tar.gz && \
        mv kfctl /usr/local/bin

    RUN mkdir -p /workdir/yaml
    RUN wget -O /workdir/yaml/kfctl_k8s_istio.v1.1.0.yaml \
       https://raw.githubusercontent.com/pachyderm/kfdata/d851c16708cc2f18e3074aaf2a663594290b2556/kfctl_k8s_istio.v1.1.0.yaml

  prewarm_script: |-
    #!/bin/bash
    export KF_NAME=kf

    # Set the path to the base directory where you want to store one or more
    # Kubeflow deployments. For example, /opt/.
    # Then set the Kubeflow application directory for this deployment.
    export BASE_DIR=/workdir
    export KF_DIR=${BASE_DIR}/${KF_NAME}

    # Set the configuration file to use, such as the file specified below:
    export CONFIG_URI="${BASE_DIR}/yaml/kfctl_k8s_istio.v1.1.0.yaml"
    # Generate and deploy Kubeflow:
    mkdir -p ${KF_DIR}
    cd ${KF_DIR}
    kfctl apply -V -f ${CONFIG_URI}
    cd ${BASE_DIR}

    # TODO: install pachyderm here

    # TODO: move the checking for unready pods into testfaster (split startup)
    unready_pods=1
    while ((unready_pods > 0)) ; do
        unready_pods=$(set +o pipefail; kubectl get po --all-namespaces --no-headers |grep -v 'Completed\|Running' |wc -l)
        echo $unready_pods unready pods
        sleep 1
    done

    echo "Got all-running pods, but waiting 10 seconds and checking again to check if we reached a stable state"
    sleep 10

    unready_pods=1
    while ((unready_pods > 0)) ; do
        unready_pods=$(set +o pipefail; kubectl get po --all-namespaces --no-headers |grep -v 'Completed\|Running' |wc -l)
        echo $unready_pods unready pods
        sleep 1
    done

    echo "Everything looks good:"
    kubectl get po --all-namespaces

  # https://github.com/kubeflow/kubeflow/issues/5246#issuecomment-682013220
  kubernetes_version: 'v1.17.11'

runtime:
  cpus: 8
  memory: 8GB
  disk: 100GB

prewarm_pool_size: 3
max_pool_size: 9
default_lease_timeout: "" # Never timeout leases, as we use this for dev
